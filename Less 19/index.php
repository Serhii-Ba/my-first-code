<?php

/*Возьми за основу любой из твоих классов Пользователь (User), состоящего как минимум
из таких свойств как имя и возраст. Создай несколько юзеров, с разным именем и возрастом
(можешь к примеру использовать функцию rand(), для генерирования случайного возраста).
Все эти юзеры должны быть помещены в один массив.
На этом этапе у тебя должен быть массив пользователей с разным именем и возрастом.
Далее, реализуй новый класс, к примеру назови его Control (не наследованный от юзера,
это новый самодостаточный класс), задачей которого будет — фильтровать и/или сортировать
пользователей. Создай там (в классе Control) метод, который будет фильтровать пользователей,
и возвращать только тех, у которых возраст больше 18 лет. Метод может быть статическим
(на твое усмотрение, но я буду рад, если он будет именно статическим), назови его к примеру filter.
Его задача принимать массив пользователей, а возвращать массив пользователей, которым больше 18 лет.
Для фильтрации, внутри метода filter, тебе понадобится функция php — array_filter. Она может
использовать у себя замыкание. Поскольку, у тебя два разных класса, то следует сделать
их в разных файлах, и реализовать автозагрузку классов, для этого тебе
подойдет функция — spl_autoload_register.*/

class User {

    public $name;

    public $age;

    public function __construct($name, $age = null) {
        $this->name = $name;
        $this->age = $age = rand(1,100);
    }

    public function getName () {
        return $this->name;
    }

    public function getAge () {
        return $this->age;
    }
}

$User1 = new User('Serhii');
$User2 = new User('Petro');
$User3 = new User('Alex');
$User4 = new User('Olha');
$User5 = new User ('Maria');

$Users = [$User1, $User2, $User3, $User4, $User5];

echo '<pre>';
var_dump($Users);

foreach ($Users as $v) {
    echo 'name: ' . $v->getName() . ', age: ' . $v ->getAge(). "\n";
}



class Control {

    static function filter() {

    }
}














